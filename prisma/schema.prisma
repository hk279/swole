generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Exercise {
  id               Int           @id(map: "exercises_pkey") @default(autoincrement())
  workout_id       Int
  exercise_type_id Int
  Exercise_type    Exercise_type @relation(fields: [exercise_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercises_exercise_type_id_fkey")
  Workout          Workout       @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercises_workout_id_fkey")
  Set              Set[]
}

model Exercise_type {
  id       Int        @id(map: "exercise_types_pkey") @default(autoincrement())
  name     String     @db.VarChar(255)
  Exercise Exercise[]
}

model Set {
  id          Int      @id(map: "sets_pkey") @default(autoincrement())
  exercise_id Int
  weight      Float
  reps        Int
  Exercise    Exercise @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sets_exercise_id_fkey")
}

model User {
  id            Int       @id(map: "users_pkey") @default(autoincrement())
  name          String?
  email         String    @unique(map: "users_email_key") @db.VarChar(255)
  emailVerified DateTime?
  image         String?
  Workout       Workout[]
  accounts      Account[]
  sessions      Session[]
}

model Workout {
  id           Int        @id(map: "workouts_pkey") @default(autoincrement())
  user_id      Int
  workout_date DateTime   @db.Date
  User         User       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workouts_user_id_fkey")
  Exercise     Exercise[]
}

// AUTHENTICATION

model Account {
  id                 String  @id @default(cuid())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
